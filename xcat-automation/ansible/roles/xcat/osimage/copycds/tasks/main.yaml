---
# copycds

- name: "[copycds] mount the software repository..."
  include_role:
    name: ansible/roles/common/nfs.mount

- name: "[copycds] create the tmpdir if it does not exist ..."
  file:
    path: "{{ xcat_ansible_tmpdir }}"
    state: directory

- copy:
    src: append_pkglist.sh 
    dest: "{{ xcat_ansible_tmpdir }}"
    mode: 0755

#
# This checks /install/<copycds_name> exists, if not, will run copycds
#
- name: "[copycds] copying {{ iso_full_path }} , using -n '{{ copycds_name }}' ..." 
  command: copycds -n {{ copycds_name }} {{ iso_full_path }}
  args:
     creates: "{{ xcat_install_dir }}/{{ copycds_name }}"
  when: require_copycds == true

- name: "[copycds] get the osimage names into variables ..."
  include_role:
    name: ansible/roles/xcat/osimage/osimage.list

- name: "[copycds] creating custom diskful osimage {{ custom_diskful_osimage_name }} ..." 
  import_tasks: create_custom_diskful_osimage.yaml 
  when: dyn_diskful_compute_name.stdout != ""

- debug: 
    msg: "[copycds] This requires 'dyn_diskful_compute_name.stdout' to be defined, skipping..." 
  when: dyn_diskful_compute_name.stdout == ""

- name: "[copycds] creating custom diskless osimage {{ custom_diskless_osimage_name }} ..." 
  import_tasks: create_custom_diskless_osimage.yaml 
  when: dyn_diskless_compute_name.stdout != ""

- debug: 
    msg: "[copycds] This requires 'dyn_diskless_compute_name.stdout' to be defined, skipping..." 
  when: dyn_diskless_compute_name.stdout == ""


- name: "[copycds] un-mount the software repository..."
  include_role:
    name: ansible/roles/common/nfs.umount

